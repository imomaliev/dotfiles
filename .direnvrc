layout_folder_pipenv() {
  local folder=.
  PIPENV_PIPFILE="${PIPENV_PIPFILE:-Pipfile}"

  if [[ $# -ne 0 ]]; then
	  folder=$1
      PIPENV_PIPFILE=$folder$PIPENV_PIPFILE
  fi

  if [[ ! -f "$PIPENV_PIPFILE" ]]; then
    log_error "No Pipfile found.  Use \`pipenv\` to create a \`$PIPENV_PIPFILE\` first."
    exit 2
  fi

  cd $folder

  VIRTUAL_ENV=$(pipenv --venv 2>/dev/null ; true)

  if [[ -z $VIRTUAL_ENV || ! -d $VIRTUAL_ENV ]]; then
    pipenv install --dev
    VIRTUAL_ENV=$(pipenv --venv)
  fi

  PATH_add "$VIRTUAL_ENV/bin"
  export PIPENV_ACTIVE=1
  export VIRTUAL_ENV

  cd -
}


layout_nvim() {
  local nvim_dir=$(direnv_layout_dir)/nvim/
  if [[ ! -d "$nvim_dir" ]]; then
    mkdir -p $nvim_dir
  fi
  touch "${nvim_dir}init.vim"
  touch $(direnv_layout_dir)/.agignore
}


layout_poetry() {
  if [[ ! -f pyproject.toml ]]; then
    log_error 'No pyproject.toml found.  Use `poetry new` or `poetry init` to create one first.'
    exit 2
  fi

  local VENV=$(poetry env info --path)
  export VIRTUAL_ENV=$(echo "$VENV" | rev | cut -d'/' -f2- | rev)
  export POETRY_ACTIVE=1
  PATH_add "$VENV"
}


layout_folder_poetry() {
  local folder=.
  local pyproject_file="pyproject.toml"

  if [[ $# -ne 0 ]]; then
	  folder=$1
      pyproject_file=$folder$pyproject_file
  fi

  if [[ ! -f "$pyproject_file" ]]; then
    log_error 'No pyproject.toml found.  Use `poetry new` or `poetry init` to create one first.'
    exit 2
  fi

  cd $folder

  local VENV=$(poetry env info | grep Path | xargs echo | cut -d ' ' -f 2)
  if [[ "$VENV" == "NA" ]]; then
    poetry install
  fi

  VENV=$(poetry env info --path)
  export VIRTUAL_ENV=$(echo "$VENV" | rev | cut -d'/' -f1- | rev)
  export POETRY_ACTIVE=1
  PATH_add "$VENV/bin"

  cd -
}
